<App Background="#CCCCCC">
  <Fuse.iOS.StatusBarConfig Style="Dark" />
  <Font File="resources/fonts/computer_pixel.ttf" ux:Global="ComputerPixel" />

  <JavaScript>
  var Pictures = require('PictureList');
  var Observable = require("FuseJS/Observable");
  var RandomCardsSet = Pictures.getList();
  var CardsArr = Observable();
  var cardsAvailableLeft = 0;
  var currentCardIndex = 0;

  /*CardsArr.onValueChanged(module, function(card){
    if (!card) return;
    if(card.index === 0) {
      card.active = true;
    }
  });*/

  function placeCards(quant) {
    RandomCardsSet.splice(0, quant).map(setUpCards);
    cardsAvailableLeft = RandomCardsSet.length;
  }

  function setUpCards(card){
    card.active = false;
    CardsArr.add(card);
  }

  function refreshCards(x){
    debug_log("refreshCards: " + JSON.stringify(x));
    CardsArr.removeAt(0);
    setTimeout(function(){
      var card = CardsArr.getAt(0);
      if(card) {
        card.active = true;
        card.liked = false;
        card.not_liked = false;
        CardsArr.replaceAt(0, card);
      }
    }, 300)

    /*if (currentCounter <= 2) {
      RandomCardsSet.splice(0, 3).map(setUpCards);
      if (RandomCardsSet.length === 0){
        debug_log("Finalizado");
      } else {
        currentCounter += 3;
      }
    }
    currentCounter--;*/
  }
/*
  function liked(x) {
    debug_log("liked");
    //debug_log("liked " + JSON.stringify(x.data));
    //refreshCards(x.data);
  }
  function notLiked(x) {
    debug_log("notLiked " + JSON.stringify(x.data));
    refreshCards(x.data);
  }
*/
function liked() {
    debug_log("liked");
  }
  function notLiked() {
    debug_log("notLiked");
  }
  function handleLiked() {
    var pic = CardsArr.getAt(0);
    if (pic) {
      pic.liked = true;
      liked({data: pic});
    }
  }
  function handleNotLiked() {
    var pic = CardsArr.getAt(0);
    if (pic) {
      pic.not_liked = true;
      notLiked({data: pic});
    }
  }
  
  placeCards(3);
  var card = CardsArr.getAt(0);
  if(card) {
    card.active = true;
    card.liked = false;
    card.not_liked = false;
    CardsArr.replaceAt(0, card);
  }
debug_log("----");
  module.exports = {
    handleLiked,
    handleNotLiked,
    liked,
    notLiked,
    CardsArr
  };

  </JavaScript>
  <Text ux:Class="TituloText" Font="ComputerPixel" Alignment="Center" Color="#BEF0E7" FontSize="45" />
  <Grid Rows="1*,6*,1*" Color="#FFF">
    <StackPanel Color="#000" ItemSpacing="-20">
      <TituloText>Gxndxr</TituloText>
      <TituloText>Generator</TituloText>
    </StackPanel>

    <Panel ux:Name="PicsPanelObj" Color="#FF0">
      <Each Items="{CardsArr}">
        <Panel Dock="Top" Height="100%" Width="100%">
          <Deferred>
            <Panel Alignment="Center">
                <DockPanel Margin="0" Height="90%" Width="90%">
                    <Rectangle Layer="Background">
                        <Stroke Width="5" Offset="2" Color="#CCC"/>
                    </Rectangle>
                    <Grid>
                        <Image MaxHeight="100%" StretchMode="Uniform" Dock="Fill" File="{file}" />
                    </Grid>
                </DockPanel>

                <WhileTrue Value="{active}">
                  <Draggable Axis="X"/>

                  <WhileTrue Value="{liked}">
                      <Move X="200" Duration="0.6" />
                  </WhileTrue>
                  <WhileTrue Value="{not_liked}">
                      <Move X="-200" Duration="0.6" />
                  </WhileTrue>

                </WhileTrue>

                <WhileDragging>
                  <BringToFront />
                  <Scale Factor="1.05" Duration="0.5" Easing="BackOut" />
                </WhileDragging>

                <InForceFieldAnimation ForceField="likedAttractor" From="0.01" To="0.2">
                  <Rotate Degrees="-8" />
                </InForceFieldAnimation>

                <InForceFieldAnimation ForceField="notLikedAttractor" From="0.01" To="0.2">
                  <Rotate Degrees="8" />
                </InForceFieldAnimation>

                <EnteredForceField ForceField="likedAttractor" Threshold="0.3" Handler="{liked}" />
                <EnteredForceField ForceField="notLikedAttractor" Threshold="0.8" Handler="{notLiked}" />
            </Panel>
        </Deferred>
        </Panel>
      </Each>
      <Panel Width="200" Height="200" Alignment="Center" >
          <Circle ux:Name="centerCircle" Color="#EF5350" />
          <PointAttractor ux:Name="centerAttractor" Radius="150" Strength="500" />
      </Panel>
      <Panel Alignment="CenterLeft" Width="50" Height="100%">
          <PointAttractor ux:Name="notLikedAttractor" Radius="600" Strength="800" Offset="-450,0,0"/>
      </Panel>
      <Panel Alignment="CenterRight" Width="50" Height="100%">
          <Circle ux:Name="leftCircle" Color="#EF5350" />
          <PointAttractor ux:Name="likedAttractor" Radius="600" Strength="800" Offset="500,0,0"/>
      </Panel>
    </Panel>
  
    <StackPanel Alignment="Center" ItemSpacing="60" Orientation="Horizontal" Margin="0,0,0,20">
      <Panel MaxWidth="100">
        <Image ux:Name="dislikePic" File="resources/interface/dislike.jpg" StretchMode="UniformToFill" />
        <Clicked Handler="{handleNotLiked}">
          <Scale Factor="1.2" Duration="0.1" Easing="BounceInOut" />
        </Clicked>
      </Panel>
      <Panel MaxWidth="100">
        <Image ux:Name="likePic" File="resources/interface/like.jpg" StretchMode="UniformToFill" />
        <Clicked Handler="{handleLiked}">
          <Scale Factor="1.2" Duration="0.1" Easing="BounceInOut" />
        </Clicked>
      </Panel>
    </StackPanel>
  </Grid>
  
</App>
